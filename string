-- 유저 테이블
CREATE TABLE member
(
    id                SERIAL PRIMARY KEY,
    username          VARCHAR(255) NOT NULL,
    nickname          VARCHAR(255) NOT NULL UNIQUE,
    email             VARCHAR(255) NOT NULL UNIQUE,
    password          VARCHAR      NOT NULL,
    information       TEXT         NOT NULL,
    profile_image_url TEXT,
    location          TEXT,
    birth_date        TIMESTAMP,
    status            VARCHAR(50),
    role_type         VARCHAR(50),
    created_at        TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at        TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- OAuth 인증 정보
CREATE TABLE oauth
(
    id               SERIAL PRIMARY KEY,
    member_id        INTEGER      NOT NULL,
    provider         VARCHAR(50)  NOT NULL, -- 예: 'google', 'facebook', 'github'
    provider_user_id VARCHAR(255) NOT NULL, -- 제공자가 제공하는 고유 ID
    access_token     TEXT,                  -- 접근 토큰
    refresh_token    TEXT,                  -- 리프레시 토큰
    expires_at       TIMESTAMP,             -- 토큰 만료 시간
    FOREIGN KEY (member_id) REFERENCES member (id),
    UNIQUE (provider, provider_user_id)     -- 각 제공자와 사용자 ID의 조합은 유일해야 함
);

-- JWT 토큰
CREATE TABLE jwt
(
    id            SERIAL PRIMARY KEY,
    member_id     INTEGER                  NOT NULL,
    refresh_token VARCHAR(500)             NOT NULL,
    expires_at    TIMESTAMP WITH TIME ZONE NOT NULL,
    FOREIGN KEY (member_id) REFERENCES member (id)
);

-- 사용자 설정
CREATE TABLE user_setting
(
    id         SERIAL PRIMARY KEY,
    member_id  INTEGER      NOT NULL,
    setting    VARCHAR(255) NOT NULL,
    value      TEXT         NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (member_id) REFERENCES member (id)
);

CREATE TABLE guild
(
    id          SERIAL PRIMARY KEY,
    name        VARCHAR(255) NOT NULL,
    description TEXT,
    created_at  TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at  TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE guild_member_map
(
    id        SERIAL PRIMARY KEY,
    guild_id  INTEGER NOT NULL,
    member_id INTEGER NOT NULL,
    role      VARCHAR(50), -- 예: 'admin', 'member'
    joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (guild_id) REFERENCES guild (id),
    FOREIGN KEY (member_id) REFERENCES member (id),
    PRIMARY KEY (guild_id, member_id)
);

-- 게시물
CREATE TABLE post
(
    id         SERIAL PRIMARY KEY,
    title      TEXT    NOT NULL,
    content    TEXT    NOT NULL,
    member_id  INTEGER NOT NULL,
    guild_id   INTEGER,                           -- 그룹 ID 추가
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (member_id) REFERENCES member (id),
    FOREIGN KEY (guild_id) REFERENCES guild (id) -- 그룹 참조 추가
);

-- 해시태그
CREATE TABLE hashtag
(
    id   SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE
);

-- 게시물 해시태그
CREATE TABLE post_hashtag_map
(
    id         SERIAL PRIMARY KEY,
    post_id    INTEGER NOT NULL,
    hashtag_id INTEGER NOT NULL,
    FOREIGN KEY (post_id) REFERENCES post (id),
    FOREIGN KEY (hashtag_id) REFERENCES hashtag (id),
    PRIMARY KEY (post_id, hashtag_id)
);

-- 미디어
CREATE TABLE media
(
    id         SERIAL PRIMARY KEY,
    post_id    INTEGER     NOT NULL,
    file_url   TEXT        NOT NULL,
    media_type VARCHAR(50) NOT NULL, -- 예: 'image', 'video'
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (post_id) REFERENCES post (id)
);

-- 댓글
CREATE TABLE comment
(
    id         SERIAL PRIMARY KEY,
    post_id    INTEGER NOT NULL,
    member_id  INTEGER NOT NULL,
    content    TEXT    NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (post_id) REFERENCES post (id),
    FOREIGN KEY (member_id) REFERENCES member (id)
);

-- 친구
CREATE TABLE friendship
(
    id             SERIAL PRIMARY KEY,
    user1_id       INTEGER     NOT NULL,
    user2_id       INTEGER     NOT NULL,
    status         VARCHAR(50) NOT NULL, -- 'active', 'inactive'
    action_user_id INTEGER     NOT NULL, -- 요청을 시작한 유저
    created_at     TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at     TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (user1_id) REFERENCES member (id),
    FOREIGN KEY (user2_id) REFERENCES member (id),
    FOREIGN KEY (action_user_id) REFERENCES member (id),
    CHECK (user1_id < user2_id),         -- 중복 관계 방지
    UNIQUE (user1_id, user2_id)
);


-- 좋아요
CREATE TABLE likes
(
    id         SERIAL PRIMARY KEY,
    post_id    INTEGER NULL,
    comment_id INTEGER NULL,
    member_id  INTEGER NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (post_id) REFERENCES post (id),
    FOREIGN KEY (comment_id) REFERENCES comment (id),
    FOREIGN KEY (member_id) REFERENCES member (id)
);

-- 쪽지
CREATE TABLE message
(
    id          SERIAL PRIMARY KEY,
    sender_id   INTEGER NOT NULL,
    receiver_id INTEGER NOT NULL,
    content     TEXT    NOT NULL,
    read        BOOLEAN                  DEFAULT FALSE,
    created_at  TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at  TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (sender_id) REFERENCES member (id),
    FOREIGN KEY (receiver_id) REFERENCES member (id)
);

-- 알림
CREATE TABLE notification
(
    id           SERIAL PRIMARY KEY,
    member_id    INTEGER     NOT NULL,
    type         VARCHAR(50) NOT NULL, -- 예: 'like', 'comment', 'friend_request'
    reference_id INTEGER,              -- 관련된 게시물 또는 댓글의 ID
    read         BOOLEAN                  DEFAULT FALSE,
    created_at   TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at   TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (member_id) REFERENCES member (id)
);

-- 활동 로그
CREATE TABLE activity_logs
(
    id          SERIAL PRIMARY KEY,
    member_id   INTEGER      NOT NULL,
    action      VARCHAR(255) NOT NULL,
    description TEXT,
    occurred_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (member_id) REFERENCES member (id)
);
